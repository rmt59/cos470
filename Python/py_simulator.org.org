# Created 2022-11-18 Fri 22:50
#+options: toc:t num:t H:3
#+title: A Simple Robot Simulator: simulator.py
#+date: Fall 2022
#+author: Roy M. Turner
#+startup: hidestars
#+startup: showall
#+latex_class: tufte-handout
#+latex_class_options: [11pt]
#+latex_header: \usepackage{tufte-textbook}

#+latex_header: \subtitle{(new-symbol.lisp)}

#+latex_header: \usepackage{enumitem}
#+latex_header: \setenumerate{itemsep=-3pt,topsep=0pt}
#+macro: marginnote @@latex:\marginnote[$2]{$1}@@@@html:<span class="marginnote">$1</span>@@
#+latex_header: \setitemize{itemsep=-3pt,topsep=0pt}
#+macro: source @@latex:\source{$1}@@
#+macro: latex @@latex:\LaTeX{}@@@@html:<span class="latex">L<sup>A</sup>T<sub>E</sub>&Chi;</span>@@
#+html_head: <link rel="stylesheet" href="my-tufte.css"/>
#+latex_class_options: [11pt]

#+latex_header: \usepackage[margin=1in]{geometry}

* Description

This is a very simple "robot world"  simulator for use by COS 470/570  students for the search assignment. It allows you to define a rectangular world and add some obstacles and/or one or more robots.  It provides a base class for robots (=Robot=) that you can subclass to create your own robots.  All you have to do is create a new class based on =Robot= and define a method =agent_program= to encode your agent's intelligence.  =agent_program= accepts a single argument, =percept= (see below), and it returns a string naming the next action to take (see below).  You can add your gent to the simulator, then use its =run= method to run the simulation.

There are also functions available give you all of the obstacle locations for when you implement (e.g.) your A^* search, as well as a very simple method to show you an overview of the current world.

* Loading the simulator

First, make sure that these files are in Python's current working directory:
- =python_simulator.py= -- the simulator itself
- =python_symbol.py= -- a "symbol" (really, unique string) generator
- =python_messages.py= -- a facility for writing messages to the user

You can load these in the normal Python way using =import=.  I'd suggest either something like:
: import python_simulator as sim

or
: from python_simulator import *

\noindent for all three, just to make your typing life easier.

* Creating a simulator

To create a simulator instance, do something like:
: s = Simulator(size=[20,20])

\noindent assuming that you have loaded it with "from" as above, else do something like:
: s = sim.Simulator(size=[20,20])

\noindent if you used the "import...as" form.

The default size is 10\times 10, with no obstacles, which is what you get if you just do:
: s = Simulator()


You can specify obstacles in one of two ways.  First, using the =num_obstacles= keyword parameter:
: s = Simulator(num_obstacles=10)


\noindent which will insert (in this case) 10 obstacles in random locations.  If you want them in particular places, you would use the second method and say exactly where you want them:
: s = Simulator(obstacle_locations=[[1,1], [3,4], [10,10]])

 *Note:* The world coordinates are

The $(x,y)$ coordinates for the world are 1-based, not 0-based; the origin is in the /top/ left corner, i.e., like arrays are laid out in (row,column) format.

* Creating a new robot type

To run your agent code, you'll need to create a new kind of robot and add it to the simulator.  I have provided a base class for you to use, =robot=.  The base class has instance variables for the robot's name (=name=), current location (=location=), current orientation (=orientation=, one of =:north=, =:south=, =:east=, or =:west=), the last percept seen (=percept=), the next action the agent program has selected (=next-action=), the previous action (=prev-action=), and the success status of the previous action (=prev-action-success=, one of =t= or =nil=).

You should not in general, however, access these yourself from your agent program, since these are /simulation/ values, not information the agent program knows.  For example, you may want your agent program, for model-based and goal-based agents,  to have and maintain  its own idea of where it is.  This may differ from the real location due to noise or other problems with sensors.  However, for your goal-based agent assignment, where you will be using A^* and other search techniques, you may want to just assume no noise and use objects' and the robot's real positions.

You want your agent program---i.e., your AI code---to be run automatically by the simulator at each "clock tick".  The simulator is designed to call a =clock_tick= method of each object (obstacles, robots) for each of its own clock ticks after figuring out what that object should see of the world (i.e., it's percept).  For objects that are not active or are stationary, this is essentially a dummy method.  For a robot class inheriting from the base =robot= class, the clock tick function calls the class' =agent_program= method, giving it the current percept. The =agent_program= method determines what the next action should be and returns it, and the =clock_tick= both sets the robot's =next_action= instance variable and returns the next action to its caller.  The simulator's own =clock_tick= method then continue by calling a method (=take_action=) to simulate the effect of the robot's =next_action=.

To run your code, you will need to create another robot class based on =robot= and define its =agent_program= method to call your code.  (In fact, you will create a different robot class for each of the parts of the assignment, most likely.)  I have provided a sample robot class, =random_robot=, that you can look at (below or in =simulator.py=) to see how to do this.

For example, suppose you have written a reflex agent program named =reflex= that takes a percept and returns an action to take.  Then all you need to do is:
#+begin_src python
class Reflex_agent (robot):
    def agent_program(self,percept):
        return reflex(percept)
#+end_src
 Of course, =reflex= really /should/ be a method, but this is just an example.

Note that for other kinds of agents, you may need to have a bit more code in =agent_program= to give your agent  additional information about the world (e.g., the location of objects in the world).

** Percept format

For the search assignment, the robots have a very  limited repertoire of sensors: just a forward-looking sonar-type thing that can  sense what is directly in front of the robot and four bump sensors, one on each side and in the front and rear, that can detect whether or not the robot bumped into something due to the /previous/ command.  This information is calculated by the simulator's =clock_tick= method and put into the robot's =percept= slot just prior to calling the robot's own =clock_tick= method.

The percept is a Python dictionary with an entry for each sensor.  The sensors are named =front_sensor=, =front_bump=, =right_bump=, =left_bump=, and =rear_bump=.  Each will have a value of =True= or =False=.

: {"front_sensor": True, "front_bump": False,
:  "right_bump"=False, "left_bump": True, "rear_bump": False"}


 This would correspond to a situation in which there is something directly in front of the robot, and the last action caused it to bump into something on its left side.[fn:2]

[fn:2] I know, this is a very verbose and redundant way to provide percepts (for example, no two bump sensors can be =t= at the same time, etc.), but it easy for you to use.   


** Adding new percept components
<<adding-percepts>>

You can add new percept components to robots you define based on =robot=.  The =robot= class has an instance variable, =percept_map=, that contains a dictionary of the form:
: {"front_sensor": "forward_sensor", ...}

 That is, each kind of sensor (e.g., ="front_sensor"=) is linked to a method (e.g., ="forward_sensor"=) that is called to give the value.

The method is called by =calculate_percept= (see the [[code][code]] below) and must take two arguments, a simulator instance and a robot (or your derived, =robot=-based class), and it needs to return the sensor's value.  You can either specify the sensors you want directly in your robot class' =percept_map= variable, or you can just add it to the global variable =robot_percept_map=, since =robot= itself sets its =percept_map= to that value.

If you do the latter, though, /don't/ list a value for =percept_map= in your class definition!  That will override =robot='s.  You're better off in general not defining a =percept_map= variable in your class definition unless you /do/ want to override the default percept \leftrightarrow mapping.

** Adding new actions

You may also want to add actions for the robot that are not provided by the standard =robot= class.  Actions are carried out according to the =command_map= instance variable of the robot; as you can see from the code, this is set for =robot= to be the value of the global variable =robot_command_map=.  A command map should be a dictionary of the form: 
: {"nop": "do_nop", "forward": "do-move-forward", ...}

 where the key is the command name and the value is the name of the method to call when that command is to be carried out.  The method needs to accept two arguments, an instance of =simulator= and an instance of =robot= (including your =robot=-derived class); it should return =True= if it succeeds and =False= if not.  These methods are called by the =take_action= method (see the code below).

You can add your own action/method pairs to =robot_command_map= when you define your robot classes, if you like, since they will inherit from =robot=, which uses the value of the variable when instantiated as its own internal command map.   You can also define your own in your robot class.


* Adding your robot to the simulator

Suppose we have the =reflex_agent= as defined above.  To add an instance of it to the world at a random location, we can just do this (assuming =sim= contains a simulator instance):
: sim.add_robot(type="reflex_agent")

 This will create a new instance of =reflex_agent= for you.  You can instead specify an existing instance by:
: sim.add_robot(robot=my_robot)


The =add_robot= method has additional parameters to allow setting the location (=location=), orientation (=orientation=), and name (=name=, which defaults to a new symbol based on =robot=).

* Changing the world

There are various methods that you can use to change the world.  For example, you can add an object (=add_object=), find an object (=find_object=), delete an object (=remove_object=), clear the entire world while leaving the simulator state alone (=clear=), and reset the simulator completely (=reset_simulator=, although why not just create a new instance?).  See the definitions below.

* Simulating your work

The major function to use to run your simulation is just =run=.  Original, no?  This has two optional parameters:
- =for= -- how many clock-ticks to run for
- =sketch-each= -- show the state of the world after each clock tick
So if you want to run it for 10 seconds (if that's what you want  clock-ticks to be):
: sim.run(for=10,sketch_each=True)


With my random robot example, doing this will give:
: >>> s.run(for=10,sketch_each=True)
: ROBOT0: Moving to (8 2).
: ++++++++++++
: +.......@.@+
: +.........@+
: +..........+
: +......@...+
: +@.........+
: +....@.....+
: +..........+
: +@.@.@.....+
: +.......>..+
: +..@.......+
: ++++++++++++
: ROBOT0: Moving to (9 2).
: ++++++++++++
: +.......@.@+
: +.........@+
: +..........+
: +......@...+
: +@.........+
: +....@.....+
: +..........+
: +@.@.@.....+
: +........>.+
: +..@.......+
: ++++++++++++
: ROBOT0: Turning right, new orientation = :NORTH.
: ++++++++++++
: +.......@.@+
: +.........@+
: +..........+
: +......@...+
: +@.........+
: +....@.....+
: +..........+
: +@.@.@.....+
: +........^.+
: +..@.......+
: ++++++++++++
: ++++++++++++
: +.......@.@+
: +.........@+
: +..........+
: +......@...+
: +@.........+
: +....@.....+
: +..........+
: +@.@.@.....+
: +........^.+
: +..@.......+
: ++++++++++++
: ROBOT0: Moving to (9 3).
: ++++++++++++
: +.......@.@+
: +.........@+
: +..........+
: +......@...+
: +@.........+
: +....@.....+
: +..........+
: +@.@.@...^.+
: +..........+
: +..@.......+
: ++++++++++++
: ROBOT0: Moving to (8 3).
: ++++++++++++
: +.......@.@+
: +.........@+
: +..........+
: +......@...+
: +@.........+
: +....@.....+
: +..........+
: +@.@.@..^..+
: +..........+
: +..@.......+
: ++++++++++++
: ROBOT0: Moving to (9 3).
: ++++++++++++
: +.......@.@+
: +.........@+
: +..........+
: +......@...+
: +@.........+
: +....@.....+
: +..........+
: +@.@.@...^.+
: +..........+
: +..@.......+
: ++++++++++++
: ROBOT0: Moving to (9 2).
: ++++++++++++
: +.......@.@+
: +.........@+
: +..........+
: +......@...+
: +@.........+
: +....@.....+
: +..........+
: +@.@.@.....+
: +........^.+
: +..@.......+
: ++++++++++++
: ROBOT0: Moving to (8 2).
: ++++++++++++
: +.......@.@+
: +.........@+
: +..........+
: +......@...+
: +@.........+
: +....@.....+
: +..........+
: +@.@.@.....+
: +.......^..+
: +..@.......+
: ++++++++++++
: ++++++++++++
: +.......@.@+
: +.........@+
: +..........+
: +......@...+
: +@.........+
: +....@.....+
: +..........+
: +@.@.@.....+
: +.......^..+
: +..@.......+
: ++++++++++++
: NIL
: SIM> 


I have provided a (very) simple way to show the world, examples of which were just shown.  This is the =simulator= method =world-sketch=.  It has keyword arguments that allow you to change what empty characters look like (=:empty-char=), what the side walls look like (=:side-wall-char=), and what the top and bottom look like (=:topo-bottom-char=). 

The character output for each object is obtained by this method by calling each object's =icon= method, which should return a single character.  The =robot= version of this outputs a pointer-like symbol to indicate its orientation.


* Miscellaneous methods

Here are some additional =simulator= methods are provided that you may find useful.  I've listed them like you would call them, assuming =sim= contains a simulator instance.

- =sim.random_location()= \to a random location =(x y)= in the world
- =sim.random_empty_location()= \to a random location that happens to be empty
- =sim.next_location=(loc,dir)= \to the adjacent location to =loc= (a list or tuple) in the direction =dir= (one of ="north"=, ="south"=, ="east"=, or ="west"=
- =sim.opposite_direction(dir)= \to  the opposite direction from =dir=
- =sim.clockwise-direction(dir)= \to the direction clockwise from  direction =dir=
- =sim.counterclockwise-direction(dir)= \to the direction counterclockwise from  direction =dir=

And here are some =world= methods you may find useful; the following assumes =sim= contains an instance of the simulator: 
- =sim.world.objects()= \to list of object instances in the world
- =sim.world.object-locations()= \to list of all locations occupied by an object
- =sim.world.empty?( =loc)= \to  =True= if the location is empty, =False= otherwise
- =sim.world.in-bounds?( =loc) \to =True= if location is inside the world, =False= otherwise
- =sim.world.add-object(object)= \to adds the object (or robot or ...) instance to the world
- =sim.world.clear()= \to removes all objects from world
- =sim.world.size()= \to size of the world (as two-element list)
- =sim.world.delete-object(object)=, =sim.world.remove-object(object)= \to (synonyms) remove the object from the world
- =sim.world.find-object(x)= \to returns the object if found, =False= otherwise; =x= can be an object (and so will just return the object if it is in the world), a location (returns the object at that location), or the name of an object (a string)
- sim.world.world-array() \to returns an array representing the world, with icons for objects (using the objects'  =icon= methods) and =None= everywhere else; used by =world-sketch=

* Code
<<code>>

** Module setup

Here is the module setup; see above for how to load simulator.  Note that this documentation is being produced from an Org Mode literate programming file that contains both Python and Lisp versions of the simulator.  Feel free to ignore the Lisp code (I know you will want to!).

#+begin_src python +n -i
from python_symbol import *
from python_messages import *
from random import randint
#+end_src

Now create a message handler "m" and a symbol generator "s":
#+begin_src python +n -i
symbolGen = SymbolGenerator()
#+end_src

** Global variables

The first of these just lists the directions the simulator/world deals with.  The second is a map (well, an association list) that maps from robot actions (e.g., =:right=) to methods that carry out those actions (e.g., =do_move_right=).  The third is a similar map for percepts.  See [[adding-percepts][above]] for more information about both of them.

#+begin_src python +n -i
directions = ["north", "south", "east", "west"]
robot_command_map = {"nop": "do-nop",
                     "forward": "do-move-forward",
                     "backward": "do-move-backward", 
                     "left": "do-move-left", 
                     "right": "do-move-right", 
                     "turn-right": "do-turn-clockwise", 
                     "turn-left": "do-turn-counterclockwise"}

robot_percept_map = {"front-sensor": "forward-sensor", 
                      "front-bump": "front-bump-sensor", 
                      "rear-bump": "rear-bump-sensor", 
                      "right-bump": "right-bump-sensor", 
                      "left-bump": "left-bump-sensor"}
#+end_src


** Object class: Simulated objects

The =Object= class represents simulation objects, for example, obstacles.  Robots and other objects can be built on this class.

#+begin_src python +n -i
class Object():
    
    def __init__(self,name=None,location=[1,1], orientation="north",icon='@'):
        self.name = name if name else symbolGen.new_symbol("obj")
        self.location = location
        self.orientation = orientation
        self.icon_char = icon
        self.world = None
        self.mh = MessageHandler()

    def clock_tick(self):
        pass

    def icon(self):
        return self.icon_char

    def msg(self,m):
        self.mh.msg(m)
    def dmsg(self,m):
        self.mh.dmsg(m)
    def vmsg(self,m):
        self.mh.vmsg(m)
    def vdmsg(self,m):
        self.mh.vdmsg(m)
#+end_src

** World class

The =World= class holds a representation of the current state of the world.

#+begin_src python +n -i
class WorldException(Exception):
    pass
class OutOfBounds(WorldException):
    pass
class LocationOccupied(WorldException):
    pass

class World():
    empty_char='.'
    side_wall_char='+'
    top_bottom_char='+'

    def __init__(self,size=[10,10],num_obstacles=0,
                 obstacle_locations=None):
        self.size = size
        self.num_obstacles = num_obstacles
        self.obstacle_locations = obstacle_locations

        self.objects = []

        self.mh = MessageHandler()

    def msg(self,m):
        self.mh.msg(m)
    def dmsg(self,m):
        self.mh.dmsg(m)
    def vmsg(self,m):
        self.mh.vmsg(m)
    def vdmsg(self,m):
        self.mh.vdmsg(m)

    def set_drawing_character(self,empty=None,side_wall=None,
                              top_bottom=None):
        self.empty_char = empty if empty else World.empty_char
        self.side_wall_char = side_wall if side_wall \
            else World.side_wall_char
        self.top_bottom_char = top_bottom if top_bottom else \
            World.top_bottom_char

    def empty(self,location):
        if not self.in_bounds(location):
            return False
        else:
            for object in self.objects:
                if object.location == location:
                    return False
            return True

    def in_bounds(self,loc):
        (x,y) = loc
        (max_x,max_y) = self.size
        return False if x < 1 or y < 1 or x > max_x or y > max_y else True

    # if "object" is a location, then add an object at that location,
    # otherwise add the object given:
    def add_object(self,object):
        if type(object) == list:
            object = Object(location=object)

        self.vdmsg(f'(adding object {object.name} to world)')

        object.world = self                  # so it can do its own percepts

        if not self.in_bounds(object.location):
            raise OutOfBounds()
        elif not self.empty(object.location):
            raise LocationOccupied
        else:
            self.objects.append(object)

    def clear(self):
        self.vdmsg('(clearing world)')
        self.objects = []

    def object_locations(self):
        return [obj.location for obj in self.objects]

    def delete_object(self,object):
        return self.remove_object(object)

    def find_object(self,description):
        if type(description) == list:
            return self.find_object_by_location(description)
        else:
            for obj in self.objects:
                if obj is description:
                    return obj
            return None

    def find_object_by_location(self,loc):
        for obj in self.objects:
            if loc == obj.location:
                return obj
        return None

    def remove_object(self,object):
        object = self.find_object(object)
        if not object:
            self.vdmsg(f'(remove_object: object {object.name} not found)')
            return None
        else:
            i = self.objects.index(object)
            self.objects = self.objects[0:i] + self.objects[i+1:]
            self.vdmsg(f'(remove_object: removed {object.name})')
            return object

    # replaces old world_sketch, world_array methods
    def draw(self):
        self.draw_line(self.top_bottom_char)
        self.draw_rows(self.empty_char,self.side_wall_char)
        self.draw_line(self.top_bottom_char)
        
    def draw_line(self,char):
        print((self.size[1]+2)*char)

    def draw_rows(self,empty,wall):
        for i in range(self.size[0]):
            print(wall,end='')
            self.draw_row(i+1,empty)
            print(wall)

    def draw_row(self,row,empty):
        for col in range(self.size[1]):
            obj = self.find_object([row,col+1])
            if obj:
                print(obj.icon(),end='')
            else:
                print(empty,end='')

    # return empty location
    def empty_location(self):
        for i in range(self.size[0]*self.size[1]):
            loc = [randint(1,self.size[0]),randint(1,self.size[0])]
            if self.empty(loc):
                return loc
        self.dmsg('No empty squares found after row*column tries.')
        return None

    class DirectionError(Exception):
        pass

    class OrientationError(Exception):
        pass

    # Note: we're going w/ row,column rather than x,y now:
    def next_location(self,location,direction):
        if direction == 'north':
            return [location[0]-1,location[1]]
        elif direction == 'south':
            return [location[0]+1,location[1]]
        elif direction == 'east':
            return [location[0],location[1]+1]            
        elif direction == 'west':
            return [location[0],location[1]-1]
        else:
            raise DirectionError()

    def opposite_direction(self,direction):
        if direction == 'north':
            return 'south'
        elif direction == 'south':
            return 'north'
        elif direction == 'east':
            return 'west'
        elif direction == 'west':
            return 'east'
        else:
            raise OrientationError()

    def clockwise_direction(self,direction):
        if direction == 'north':
            return 'east'
        elif direction == 'south':
            return 'west'
        elif direction == 'east':
            return 'south'
        elif direction == 'west':
            return 'north'
        else:
            raise OrientationError()

    def counterclockwise_direction(self,direction):
        return self.opposite_direction(self.clockwise_direction(direction))

    def set_drawing_character(self,empty=None,side_wall=None,
                              top_bottom=None):
        self.world(set_drawing_character(empty=empty,side_wall=side_wall,
                                         top_bottom=top_bottom))
#+end_src

** Simulator class

This is the class that represents the simulator itself.  It contains the world.

#+begin_src python +n -i
class Simulator():
    def __init__(self,size=[10,10],num_obstacles=0,obstacle_locations=None):
        self.time = 0
        self.world = World(size=size,num_obstacles=num_obstacles,
                           obstacle_locations=obstacle_locations)
        self.mh = MessageHandler()

    def msg(self,m):
        self.mh.msg(m)
    def dmsg(self,m):
        self.mh.dmsg(m)
    def vmsg(self,m):
        self.mh.vmsg(m)
    def vdmsg(self,m):
        self.mh.vdmsg(m)

    def clear(self):
        self.time = 0
        self.world.clear()
        self.msg('Cleared.')

    def reset(self):
        self.clear()

    def add_obstacles(self,loc_list):
        return self.add_objects(loc_list)

    # "loc_list" can be a list of locations or actual object instances:
    def add_objects(self,loc_list):
        for loc in loc_list:
            self.world.add_object(loc)

    def add_object(self,loc_or_obj):
        return self.world.add_object(loc_or_obj)

    def add_random_obstacles(self,number=None,max=20,min=1):
        if number == None:
            number = randint(min,max)
        for i in range(number):
            self.add_random_obstacle()

    def add_random_obstacle(self):
        self.world.add_object(self.world.empty_location())

    def add_robot(self,robot=None,name=None,location=None,orientation=None,
                  robot_type='Robot'):
        if location and not self.empty(location):
            self.msg(f"Can't add robot at {location}: not empty or out of bounds.")
            return False
        if robot is None:
            robot = eval(f'{robot_type}()')
            robot.location = location if location else self.world.empty_location()
            robot.orientation = location if location else directions[randint(0,3)]
        else:
            if location:
                robot.location = location
            if orientation:
                robot.orientation = orientation

        self.dmsg(f'Adding robot {robot.name} at {robot.location}, orientation {robot.orientation}')
        return self.add_object(robot)

    def delete_object(self,object):
        self.world.delete_object(object)

    def remove_object(self,object):
        self.world.delete_object(object)

    def random_location(self):
        return [randint(1,self.world.size[0]),randint(1,self.world.size[1])]

    def random_empty_location(self):
        self.world.empty_location()

    # class DirectionError(Exception):
    #     pass

    # class OrientationError(Exception):
    #     pass

    # # Note: we're going w/ row,column rather than x,y now:
    # def next_location(self,location,direction):
    #     if direction == 'north':
    #         return [location[0]-1,location[1]]
    #     elif direction == 'south':
    #         return [location[0]+1,location[1]]
    #     elif direction == 'east':
    #         return [location[0],location[1]+1]            
    #     elif direction == 'west':
    #         return [location[0],location[1]-1]
    #     else:
    #         raise DirectionError()

    # def opposite_direction(self,direction):
    #     if direction == 'north':
    #         return 'south'
    #     elif direction == 'south':
    #         return 'north'
    #     elif direction == 'east':
    #         return 'west'
    #     elif direction == 'west':
    #         return 'east'
    #     else:
    #         raise OrientationError()

    # def clockwise_direction(self,direction):
    #     if direction == 'north':
    #         return 'east'
    #     elif direction == 'south':
    #         return 'west'
    #     elif direction == 'east':
    #         return 'south'
    #     elif direction == 'west':
    #         return 'north'
    #     else:
    #         raise OrientationError()

    # def counterclockwise_direction(self,direction):
    #     return self.opposite_direction(self.clockwise_direction())

    # def set_drawing_character(self,empty=None,side_wall=None,
    #                           top_bottom=None):
    #     self.world(set_drawing_character(empty=empty,side_wall=side_wall,
    #                                      top_bottom=top_bottom))

    def draw(self,empty_char='.',side_wall_char='+',top_bottom_char='+'):
        self.world.draw()

    def run(self,ticks=1,show_each=False):
        self.msg(f'Running for {ticks} ticks.')
        for i in range(ticks):
            self.clock_tick()
            if show_each:
                self.draw()

    def clock_tick(self):
        self.dmsg('.')
        for object in self.world.objects:
            object.clock_tick()
        self.time += 1

    def find_object(self,description):
        return self.world.find_object(description)
#+end_src


** Robot classes

#+begin_src python +n -i
class Robot(Object):
    command_map = {"nop": "do_nop",
                   "forward": "do_move_forward",
                   "backward": "do_move_backward", 
                   "left": "do_move_left", 
                   "right": "do_move_right", 
                   "turn_right": "do_turn_clockwise",
                   "turn_left": "do_turn_counterclockwise"}

    percept_map = {"front_sensor": "forward_sensor", 
                   "front_bump": "front_bump_sensor", 
                   "rear_bump": "rear_bump_sensor", 
                   "right_bump": "right_bump_sensor", 
                   "left_bump": "left_bump_sensor"}

    def __init__(self,command_map=None,percept_map=None,
                 location=[1,1],orientation='north',
                 name=None):
        super().__init__(location=location, orientation=orientation)
        self.percept = None
        self.next_action = None
        self.prev_action = None
        self.prev_action_success = None
        
        self.command_map = command_map if command_map else \
            Robot.command_map
        self.percept_map = percept_map if percept_map else \
            Robot.percept_map

        self.name = name if name else symbolGen.new_symbol('robot')

#        self.location = location
#        self.orientation = orientation


    def calculate_percept(self):
        percept = []
        for sensor in self.percept_map:
            func = self.percept_map[sensor]
            self.vdmsg(f'(calculate_percept({self.name}): calculating {sensor} value)')
            percept.append([sensor, eval(f'self.{func}()')])
        return percept

    def icon(self):
        if self.orientation == 'north':
            return '^'
        elif self.orientation == 'south':
            return 'v'
        elif self.orientation == 'east':
            return '>'
        elif self.orientation == 'west':
            return '<'
        else:
            return '?'
        
            

    def clock_tick(self):
        self.calculate_percept()
        self.next_action = self.agent_program(self.percept)
        self.take_action()
        return True

    def agent_program(self,percept):
        self.msg(f'{self.name}: Dummy agent_program({percept}) called.')
        return 'nop'

    ## Sensor methods
    def forward_sensor(self):
        if self.world.empty(self.world.next_location(self.location,
                                                     self.orientation)):
            return False
        else:
            return True

    def front_bump_sensor(self):
        return self.bump_sensor('forward',self.orientation)
    def rear_bump_sensor(self):
        return self.bump_sensor('backward',self.world.opposite_direction(self.orientation))
    def left_bump_sensor(self):
        return self.bump_sensor('left', self.world.counterclockwise_direction(self.orientation))
    def right_bump_sensor(self):
        return self.bump_sensor('right', self.world.clockwise_direction(self.orientation))

    def bump_sensor(self,which,direction):
        return self.prev_action == which and \
            not self.prev_action_success and \
            not self.world.empty(self.world.next_location(self.location, direction))

    ## Action methods:
    def take_action(self):
        if not self.next_action in self.command_map:
            self.msg(f'take_action for {self.name}: unknown action {self.next_action}; ' + \
                'doing nothing')
            self.next_action = "nop"
            self.prev_action_success = False
        else:
            method = self.command_map[self.next_action]
            self.msg(f'{self.name}: Performing action {self.next_action}')
            self.dmsg(f'(take_action: calling method {method})')
            self.prev_action_success = eval(f'self.{method}()')

        self.prev_action = self.next_action
        self.next_action = None
        return self.prev_action_success

    ## actions implementation:
    def do_nop(self):
        return True

    def do_move_forward(self):
        world = self.world
        return self.move(world.next_location(self.location,self.orientation))

    def do_move_backward(self):
        world = self.world
        return \
            self.move(world.next_location(self.location,
                                          world.opposite_direction(self.orientation)))

    def do_move_left(self):
        world = self.world
        return \
            self.move(world.next_location(self.location,
                                          world.counterclockwise_direction(self.orientation)))

    def do_move_right(self):
        world = self.world
        return \
            self.move(world.next_location(self.location,
                                          world.clockwise_direction(self.orientation)))

    def move(self,location):
        if not self.world.empty(location):
            self.msg(f'{self.name}: Tried and failed to move to {location}.')
            return False
        else:
            self.location = location
            self.msg(f'{self.name} Moving to {location}.')
            return True

    def do_turn_clockwise(self):
        self.orientation = self.world.clockwise_direction(self.orientation)
        self.msg(f'{self.name}: Turning right to {self.orientation}.')
        return True

    def do_turn_counterclockwise(self):
        self.orientation = self.world.counterclockwise_direction(self.orientation)
        self.msg(f'{self.name}: Turning left to {self.orientation}.')
        return True
#+end_src

** Functions

#+begin_src python +n -i
def create_simulator(size=[10,10],num_obstacles=0,obstacle_locations=None):
    return Simulator(size=size,num_obstacles=num_obstacles,obstacle_locations=obstacle_locations)
#+end_src

** Example: =RandomRobot=

#+begin_src python +n -i
class RandomRobot(Robot):
    def __init__(self,command_map=None,percept_map=None,
                 location=[1,1],orientation='north',
                 name=None):
        super().__init__(command_map=command_map, percept_map=percept_map,
                                   location=location, orientation=orientation,
                                   name=symbolGen.new_symbol('randrob'))

    def agent_program(self,percept):
        keys = list(self.command_map.keys())
        self.next_action = keys[randint(0,len(keys)-1)]
        self.dmsg(f'{self.name}: next action={self.next_action}.')
        return self.next_action
#+end_src
